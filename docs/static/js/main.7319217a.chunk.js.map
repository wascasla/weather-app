{"version":3,"sources":["screens/inicio/redux-sagas/types.js","screens/inicio/redux-sagas/reducers.js","store/createReducer.js","store/reducers.js","screens/inicio/redux-sagas/actions.js","api/api.js","api/weather.js","screens/inicio/redux-sagas/saga.js","store/sagas.js","store/index.js","components/spinner/Spinner.js","components/cardCurrentWeather/CardCurrentWeather.js","components/formSelectCity/FormSelectCity.js","components/cardForecastWeather/CardForecastWeather.js","components/boxForecast/BoxForecast.js","screens/inicio/Inicio.js","App.js","reportWebVitals.js","index.js"],"names":["GET_CURRENT_WEATHER","GET_CURRENT_WEATHER_SUCCESS","GET_CURRENT_WEATHER_ERROR","GET_FORECAST_WEATHER","GET_FORECAST_WEATHER_SUCCESS","GET_FORECAST_WEATHER_ERROR","WeatherReducer","initialState","handlers","state","action","hasOwnProperty","type","createReducer","currentWeather","undefined","forecatsWeather","loadingCurrent","loadingForecast","errorCurrent","errorForecast","types","payload","data","slice","createRootReducer","combineReducers","weather","result","getCurrentWeatherError","getForecastWeatherError","instance","axios","create","baseURL","process","key","latitude","longitude","api","get","getCurrentWeather","watchGetCurrentWeather","getForecatsWeather","watchGetForecatsWeather","WeatherSaga","call","response","put","actions","takeEvery","daily","all","fork","rootSaga","WeatherSagas","sagaMiddleWare","createSagaMiddleware","store","createStore","rootReducers","compose","applyMiddleware","run","rootSagas","Spinner","className","CardCurrentWeather","loading","error","Math","round","main","temp","FormSelectCity","getWeather","useState","id","name","listCities","citySelected","setCitySelected","onSubmit","event","preventDefault","alert","value","defaultValue","onChange","find","element","parseInt","target","disabled","hidden","map","city","CardForecastWeather","index","moment","add","format","max","min","dt","BoxForecast","forecatsWeatherList","w","i","sunset","Inicio","dispatch","useDispatch","currentPosition","setCurrentPosition","useSelector","useEffect","navigator","geolocation","getCurrentPosition","position","coords","getForecastWeather","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7319217a.chunk.js","sourcesContent":["export const GET_CURRENT_WEATHER = \"GET_CURRENT_WEATHER\";\r\nexport const GET_CURRENT_WEATHER_SUCCESS = \"GET_CURRENT_WEATHER_SUCCESS\";\r\nexport const GET_CURRENT_WEATHER_ERROR = \"GET_CURRENT_WEATHER_ERROR\";\r\n\r\nexport const GET_FORECAST_WEATHER = \"GET_FORECAST_WEATHER\";\r\nexport const GET_FORECAST_WEATHER_SUCCESS = \"GET_FORECAST_WEATHER_SUCCESS\";\r\nexport const GET_FORECAST_WEATHER_ERROR = \"GET_FORECAST_WEATHER_ERROR\";\r\n","import createReducer from \"../../../store/createReducer\";\r\nimport * as types from \"./types\";\r\n\r\nconst initialState = {\r\n  currentWeather: undefined,\r\n  forecatsWeather: [],\r\n  loadingCurrent: false,\r\n  loadingForecast: false,\r\n  errorCurrent: undefined,\r\n  errorForecast: undefined,\r\n};\r\n\r\nconst WeatherReducer = createReducer(initialState, {\r\n  [types.GET_CURRENT_WEATHER](state) {\r\n    return { ...state, loadingCurrent: true, currentWeather: undefined, errorCurrent: undefined };\r\n  },\r\n  [types.GET_CURRENT_WEATHER_SUCCESS](state, action) {\r\n    return { ...state, loadingCurrent: false, currentWeather: action.payload };\r\n  },\r\n  [types.GET_CURRENT_WEATHER_ERROR](state) {\r\n    return {\r\n      ...state,\r\n      loadingCurrent: false,\r\n      errorCurrent: \"Error al obtener el clima actual, intente más tarde por favor\",\r\n    };\r\n  },\r\n\r\n  [types.GET_FORECAST_WEATHER](state) {\r\n    return { ...state, loadingForecast: true, forecatsWeather: [], errorForecast: undefined };\r\n  },\r\n  [types.GET_FORECAST_WEATHER_SUCCESS](state, action) {\r\n    let data = action.payload;\r\n    return { ...state, loadingForecast: false, forecatsWeather: data.slice(0, 5) };\r\n  },\r\n  [types.GET_FORECAST_WEATHER_ERROR](state) {\r\n    return {\r\n      ...state,\r\n      loadingForecast: false,\r\n      errorForecast: \"Error al obtener el clima para los próximos días, intente más tarde por favor\",\r\n    };\r\n  },\r\n});\r\n\r\nexport default WeatherReducer;\r\n","export default function createReducer(initialState, handlers) {\r\n  return function reducer(state = initialState, action) {\r\n    // eslint-disable-next-line no-prototype-builtins\r\n    if (handlers.hasOwnProperty(action.type)) {\r\n      return handlers[action.type](state, action);\r\n    } else {\r\n      return state;\r\n    }\r\n  };\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport WeatherReducer from \"./../screens/inicio/redux-sagas/reducers\";\r\n\r\nconst createRootReducer = combineReducers({\r\n  weather: WeatherReducer,\r\n});\r\n\r\nexport default createRootReducer;\r\n","import * as types from \"./types\";\r\n\r\nconst result = (type, payload) => {\r\n  return {\r\n    type: type,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nexport const getCurrentWeather = (payload) => result(types.GET_CURRENT_WEATHER, payload);\r\nexport const getCurrentWeatherSuccess = (payload) => result(types.GET_CURRENT_WEATHER_SUCCESS, payload);\r\nexport const getCurrentWeatherError = (payload) => result(types.GET_CURRENT_WEATHER_ERROR, payload);\r\n\r\nexport const getForecastWeather = (payload) => result(types.GET_FORECAST_WEATHER, payload);\r\nexport const getForecastWeatherSuccess = (payload) => result(types.GET_FORECAST_WEATHER_SUCCESS, payload);\r\nexport const getForecastWeatherError = (payload) => result(types.GET_FORECAST_WEATHER_ERROR, payload);\r\n","import axios from \"axios\";\r\n\r\n// eslint-disable-next-line no-undef\r\nconst apiUrl = process.env.REACT_APP_WEATHER_API_URL;\r\n\r\nconst instance = axios.create({\r\n  baseURL: apiUrl,\r\n});\r\n\r\nexport default instance;\r\n","import api from \"./api\";\r\n\r\n// eslint-disable-next-line no-undef\r\nconst key = process.env.REACT_APP_KEY_WEATHER_API;\r\n\r\n\r\nexport default {\r\n  getCurrentWeather: function (latitude, longitude) {\r\n    return api.get(`weather/?lat=${latitude}&lon=${longitude}&units=metric&appid=${key}`);\r\n  },\r\n\r\n  getForecastWeather: function (latitude, longitude) {\r\n    return api.get(\r\n      `onecall?lat=${latitude}&lon=${longitude}&exclude=current,hourly,minutely,alerts&units=metric&appid=${key}`\r\n    );\r\n  },\r\n};","import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\r\nimport * as types from \"./types\";\r\nimport * as actions from \"./actions\";\r\nimport { weather } from \"../../../api\";\r\n\r\nfunction* getCurrentWeather(action) {\r\n  try {\r\n    const { latitude, longitude } = action.payload;\r\n    const response = yield call(weather.getCurrentWeather, latitude, longitude);\r\n    yield put(actions.getCurrentWeatherSuccess(response.data));\r\n  } catch (error) {\r\n    yield put(actions.getCurrentWeatherError(error));\r\n  }\r\n}\r\n\r\nfunction* watchGetCurrentWeather() {\r\n  yield takeEvery(types.GET_CURRENT_WEATHER, getCurrentWeather);\r\n}\r\n\r\nfunction* getForecatsWeather(action) {\r\n  try {\r\n    const { latitude, longitude } = action.payload;\r\n    const response = yield call(weather.getForecastWeather, latitude, longitude);\r\n    yield put(actions.getForecastWeatherSuccess(response.data.daily));\r\n  } catch (error) {\r\n    yield put(actions.getForecastWeatherError(error));\r\n  }\r\n}\r\n\r\nfunction* watchGetForecatsWeather() {\r\n  yield takeEvery(types.GET_FORECAST_WEATHER, getForecatsWeather);\r\n}\r\n\r\nfunction* WeatherSaga() {\r\n  yield all([fork(watchGetCurrentWeather), fork(watchGetForecatsWeather)]);\r\n}\r\n\r\nexport default WeatherSaga;\r\n","import { all } from \"redux-saga/effects\";\r\nimport WeatherSagas from \"./../screens/inicio/redux-sagas/saga\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([WeatherSagas()]);\r\n}\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\n\r\nimport rootReducers from \"./reducers\";\r\nimport rootSagas from \"./sagas\";\r\n\r\nconst sagaMiddleWare = createSagaMiddleware();\r\n\r\nconst store = createStore(rootReducers, compose(applyMiddleware(sagaMiddleWare)));\r\n\r\nsagaMiddleWare.run(rootSagas);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport \"./Spinner.css\";\r\n\r\nconst Spinner = () => {\r\n  return <div className=\"spinner\"></div>;\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport \"./CardCurrentWeather.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CardCurrentWeather = ({ data, loading, error }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <h3>Actual</h3>\r\n      {data ? (\r\n        <>\r\n          <div>{Math.round(data?.main?.temp)}°C</div>\r\n        </>\r\n      ) : null}\r\n      {loading && <Spinner />}\r\n      {error ? error : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nCardCurrentWeather.propTypes = {\r\n  error: PropTypes.string,\r\n  loading: PropTypes.bool,\r\n  data: PropTypes.any,\r\n};\r\n\r\nexport default CardCurrentWeather;\r\n","import React, { useState } from \"react\";\r\nimport \"./FormSelectCity.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst FormSelectCity = ({ getWeather }) => {\r\n  const [listCities] = useState([\r\n    {\r\n      id: 1,\r\n      name: \"Miami\",\r\n      latitude: 25.774269,\r\n      longitude: -80.193657,\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Porto Alegre\",\r\n      latitude: -30.03306,\r\n      longitude: -51.23,\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Tilcara\",\r\n      latitude: -23.57757,\r\n      longitude: -65.350899,\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"Villa del Prado\",\r\n      latitude: 40.26915,\r\n      longitude: -4.3046,\r\n    },\r\n    {\r\n      id: 5,\r\n      name: \"New York City\",\r\n      latitude: 40.714272,\r\n      longitude: -74.005966,\r\n    },\r\n  ]);\r\n\r\n  const [citySelected, setCitySelected] = useState(0);\r\n\r\n  const handleChange = (event) => {\r\n    const result = listCities.find((element) => element.id === parseInt(event.target.value));\r\n    setCitySelected(result);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    if (citySelected) {\r\n      getWeather(citySelected);\r\n    } else {\r\n      alert(\"Debe seleccionar una ciudad!!!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"select-city\">\r\n      <form className=\"form-select-city\" onSubmit={handleSubmit}>\r\n        <label>Elige una ciudad para consultar el clima:</label>\r\n        <select name=\"city\" value={citySelected?.id} defaultValue=\"none\" onChange={handleChange}>\r\n          <option value=\"none\" disabled hidden>\r\n            Seleccione una Ciudad\r\n          </option>\r\n          {listCities.map((city) => (\r\n            <option key={city.id} value={city.id}>\r\n              {city.name}{\" \"}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <input type=\"submit\" value=\"Consultar\" />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nFormSelectCity.propTypes = {\r\n  getWeather: PropTypes.func,\r\n};\r\n\r\nexport default FormSelectCity;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport \"./CardForecastWeather.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CardForecastWeather = ({ data, index }) => {\r\n  return (\r\n    <div className=\"box\">\r\n      <div key={data?.dt} className=\"card-for\">\r\n        <h5>\r\n          {moment()\r\n            .add(index + 1, \"d\")\r\n            .format(\"DD/MM\")}\r\n        </h5>\r\n        <div>{Math.round(data?.temp?.max)}°C</div>\r\n        <div>{Math.round(data?.temp?.min)}°C</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nCardForecastWeather.propTypes = {\r\n  data: PropTypes.any,\r\n  index: PropTypes.number,\r\n};\r\n\r\nexport default CardForecastWeather;\r\n","import React from \"react\";\r\nimport CardForecastWeather from \"../cardForecastWeather/CardForecastWeather\";\r\nimport Spinner from \"../spinner/Spinner\";\r\nimport \"./BoxForecast.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst BoxForecast = ({ forecatsWeatherList, loading, error }) => {\r\n  return (\r\n    <>\r\n      <h3>Clima para los próximos 5 días </h3>\r\n      {forecatsWeatherList ? (\r\n        <div className=\"box-forecast\">\r\n          {forecatsWeatherList?.map((w, i) => (\r\n            <CardForecastWeather key={w.sunset} data={w} index={i} />\r\n          ))}\r\n        </div>\r\n      ) : null}\r\n      {loading ? <Spinner /> : null}\r\n      {error ? error : null}\r\n    </>\r\n  );\r\n};\r\n\r\nBoxForecast.propTypes = {\r\n  error: PropTypes.string,\r\n  loading: PropTypes.bool,\r\n  forecatsWeatherList: PropTypes.array,\r\n};\r\n\r\nexport default BoxForecast;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport CardCurrentWeather from \"../../components/cardCurrentWeather/CardCurrentWeather\";\r\nimport FormSelectCity from \"../../components/formSelectCity/FormSelectCity\";\r\nimport { getCurrentWeather, getForecastWeather } from \"./redux-sagas/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport BoxForecast from \"../../components/boxForecast/BoxForecast\";\r\n\r\nconst Inicio = () => {\r\n  const dispatch = useDispatch();\r\n  const [currentPosition, setCurrentPosition] = useState();\r\n\r\n  const { currentWeather, forecatsWeather, loadingCurrent, loadingForecast, errorCurrent, errorForecast } = useSelector(\r\n    (state) => state.weather\r\n  );\r\n\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      setCurrentPosition(position.coords);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (currentPosition) {\r\n      getWeather(currentPosition);\r\n    }\r\n  }, [currentPosition]);\r\n\r\n  const getWeather = (city) => {\r\n    dispatch(getCurrentWeather(city));\r\n    dispatch(getForecastWeather(city));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Clima en {loadingCurrent ? \"...\" : currentWeather?.name} </h1>\r\n      <FormSelectCity getWeather={getWeather} />\r\n      <CardCurrentWeather data={currentWeather} loading={loadingCurrent} error={errorCurrent} />\r\n      <BoxForecast forecatsWeatherList={forecatsWeather} loading={loadingForecast} error={errorForecast} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Inicio;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Inicio from \"./screens/inicio/Inicio\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Inicio />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}